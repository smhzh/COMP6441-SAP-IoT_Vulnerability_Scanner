# References:
# https://labex.io/tutorials/python-building-a-network-scanner-in-python-298855
# https://www.youtube.com/watch?v=ttRnLLtV24c
# https://macvendors.com/api
# https://github.com/TomSchimansky/CustomTkinter
# https://www.youtube.com/watch?v=Y01r643ckfI&list=PLfZw_tZWahjxJl81b1S-vYQwHs_9ZT77f
# https://www.youtube.com/watch?v=DFTwB2nAexs

import socket
import requests
import nmap
# import customtkinter as ctk
# from tkinter.scrolledtext import ScrolledText

# Here we will get the ip adress from the hostname using the socket package.
# We then get the range of that entire subnet by ammending with .0/24.
# This gives us all the IPs from e.g. 192.168.1.1 to 192.168.1.254
# References: adapted from https://www.tutorialspoint.com/python-program-to-find-the-ip-address-of-the-client
def calculate_range_ip():
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(hostname)
    # add .0/24 to the end of the first 3 segments
    # e.g. 192.168.1.1 will become 192.168.1.0/24
    ip_subnet = '.'.join(ip_address.split('.')[:3]) + ".0/24"
    return ip_subnet

# In this function we will use macvendors.com to get the vendor name of
# a device from its MAC address. This will let us know what company manufactured
# the device.
# References: adapted from https://www.packetswitch.co.uk/how-to-use-mac-vendor-api/
def find_vendor_api(mac):
    # Use requests.get() to send HTTP GET request to the mac vendors api
    r = requests.get(f"https://api.macvendors.com/{mac}")
    # print("in mac api")
    # this code means that the was a successful response from the HTTP req
    if r.status_code == 200:
        return r.text
    else:
        return "Uh oh... No Vendor info"

# Here we will do a check for default credentials. We will try to 
# login with HTTP requests and use common default passwords.
# References: adapted from https://www.youtube.com/watch?v=SjOMF6WZOkc (9:30)
def def_creds_test(ip):
    common_pass = [("admin", "admin"), ("admin", "password"), ("admin", ""), ("admin", "1234"), ("admin", "0000"), ("", "")]
    for def_user, def_pass in common_pass:
        # send request to the device's HTTP port
        response = requests.get(f"http://{ip}", auth = (def_user, def_pass), timeout = 3 )
        # print("http req sent!!!!!")
        # 200 response code means the default credentials works, if not no def creds used
        if response.status_code == 200:
            return f"Default credentials used!!!: {def_user}:{def_pass}"
        else:
            return "No default credentials used (:"

# This is the main function. We will perfrom an nmap scan on the current ip range.
# Then we will scan commonly used ports 22,80,433 to check if they are open.
# References: https://www.studytonight.com/network-programming-in-python/integrating-port-scanner-with-nmap
#             https://www.youtube.com/watch?v=x4AE5yOF9pE
def scan_network():
    ip_subnet = calculate_range_ip()
    nm = nmap.PortScanner()
    
    print(f"Finding vulnerabilities in: {ip_subnet}")
    # Do the nmap scan on the ip range (hosts) on selected ports (arguments).
    # -p- is all ports too long, T4 aggressive or T5
    nm.scan(hosts = ip_subnet, arguments = 'sS -n -T4 -p 22,80,443')

    # loop through all hosts
    for host in nm.all_hosts():
        print(f"\nHost: {host}")
        # print(nm[host])
        # get mac address from nmap scan
        mac = nm[host]['addresses'].get('mac', None)
        if mac:
            # find vendor if there was mac add found
            vendor = find_vendor_api(mac)
            print(f"MAC: {mac} Vendor: {vendor}")
        else:
            print("MAC: cannot find")
        
        # find fro any open ports
        print("Scanning open ports...")
        # only checking for TCP because network services like HTTP use TCP
        if 'tcp' in nm[host]:
            open_ports = nm[host]['tcp']
            for port in open_ports:
                # find the open ports
                port_state = open_ports[port]['state']
                print(f"Port {port} is {port_state}")
            # Check if the HTTP is open to check for def creds
            if port_state == 'open':
                print(f"{def_creds_test(host)}")
            else:
                print("No open ports with default credentials (:")

# run main function
scan_network()